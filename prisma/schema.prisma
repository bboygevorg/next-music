generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = "postgres://default:9RTfJyIP7mlS@ep-aged-poetry-a2qucbzu-pooler.eu-central-1.aws.neon.tech:5432/verceldb?sslmode=require"
    directUrl = "postgres://default:9RTfJyIP7mlS@ep-aged-poetry-a2qucbzu.eu-central-1.aws.neon.tech:5432/verceldb?sslmode=require"
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String   @unique
    password String
    role     UserRole @default(USER)
    verified DateTime

    provider   String?
    providerId String?

    cart            Cart?
    orders          Order[]
    verifactionCode VerifactionCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    accessories Accessories[]
    items       ProductItem[]

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id    Int @id @default(autoincrement())
    price Int

    CartItem CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Accessories {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    produtcs Product[]
    cartItem CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    token String?

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Order     Order[]
}

model CartItem {
    id Int @id @default(autoincrement())

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int @default(1)

    accessories Accessories[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerifactionCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    expiresAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
